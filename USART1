
/*------------------------------------------------------------------*/
/* --- STC MCU International Limited -------------------------------*/
/* --- STC 1T Series MCU RC Demo -----------------------------------*/
/* --- Mobile: (86)13922805190 -------------------------------------*/
/* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
/* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
/* --- Web: www.GXWMCU.com -----------------------------------------*/
/* --- QQ:  800003751 ----------------------------------------------*/
/* If you want to use the program or the program referenced in the  */
/* article, please specify in which data and procedures from STC    */
/*------------------------------------------------------------------*/


#include "USART1.h"


COMx_Define	COM1;
u8	idata TX1_Buffer[COM_TX1_Lenth];	//
u8 	idata RX1_Buffer[COM_RX1_Lenth];	//

u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
{
	u8	i;
	u32	j;
	
	if(UARTx == USART1)
	{
		COM1.id = 1;
		COM1.TX_read    = 0;
		COM1.TX_write   = 0;
		COM1.B_TX_busy  = 0;
		COM1.RX_Cnt     = 0;
		COM1.RX_TimeOut = 0;
		COM1.B_RX_OK    = 0;
		for(i=0; i<COM_TX1_Lenth; i++)	TX1_Buffer[i] = 0;
		for(i=0; i<COM_RX1_Lenth; i++)	RX1_Buffer[i] = 0;

		if(COMx->UART_Mode > UART_9bit_BRTx)	return 1;	//
		if(COMx->UART_Polity == PolityHigh)		PS = 1;	//
		else									PS = 0;	//
		SCON = (SCON & 0x3f) | COMx->UART_Mode;
		if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx))	//
		{
			j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;	//
			if(j >= 65536UL)	return 2;	//
			j = 65536UL - j;
			if(COMx->UART_BRT_Use == BRT_Timer1)
			{
				TR1 = 0;
				AUXR &= ~0x01;		//S1 BRT Use Timer1;
				TMOD &= ~(1<<6);	//Timer1 set As Timer
				TMOD &= ~0x30;		//Timer1_16bitAutoReload;
				AUXR |=  (1<<6);	//Timer1 set as 1T mode
				TH1 = (u8)(j>>8);
				TL1 = (u8)j;
				ET1 = 0;	//
				TMOD &= ~0x40;	//
				INT_CLKO &= ~0x02;	//
				TR1  = 1;
			}
			else if(COMx->UART_BRT_Use == BRT_Timer2)
			{
				AUXR &= ~(1<<4);	//Timer stop   
				AUXR |= 0x01;		//S1 BRT Use Timer2 
				AUXR &= ~(1<<3);	//Timer2 set As Timer
				AUXR |=  (1<<2);	//Timer2 set as 1T mode
				TH2 = (u8)(j>>8);
				TL2 = (u8)j;
				IE2  &= ~(1<<2);	//
				AUXR &= ~(1<<3);	//
				AUXR |=  (1<<4);	//Timer run enable
			}
			else return 2;	//
		}
		else if(COMx->UART_Mode == UART_ShiftRight)
		{
			if(COMx->BaudRateDouble == ENABLE)	AUXR |=  (1<<5);	//
			else								AUXR &= ~(1<<5);	//
		}
		else if(COMx->UART_Mode == UART_9bit)	//
		{
			if(COMx->BaudRateDouble == ENABLE)	PCON |=  (1<<7);	//
			else								PCON &= ~(1<<7);	//
		}
		if(COMx->UART_Interrupt == ENABLE)	ES = 1;	//
		else								ES = 0;	//
		if(COMx->UART_RxEnable == ENABLE)	REN = 1;	//
		else								REN = 0;	//
		P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);	//
		if(COMx->UART_RXD_TXD_Short == ENABLE)	PCON2 |=  (1<<4);	//
		else									PCON2 &= ~(1<<4);
		return	0;
	}
	return 3;	//
}


/***************  *******************************/

void TX1_write2buff(u8 dat)	//
{
	TX1_Buffer[COM1.TX_write] = dat;	//
	if(++COM1.TX_write >= COM_TX1_Lenth)	COM1.TX_write = 0;

	if(COM1.B_TX_busy == 0)		//
	{  
		COM1.B_TX_busy = 1;		//
		TI = 1;					//
	}
}

void PrintString1(u8 *puts)
{
//    for (; *puts != 0;	puts++)  TX1_write2buff(*puts); 	//
	u16 *addr=puts;
	for(; (puts-addr)<=7;	puts++)  TX1_write2buff(*puts); 	 //
}



/********************* ************************/
void UART1_int (void) interrupt UART1_VECTOR
{
	if(RI)
	{
		RI = 0;
		if(COM1.B_RX_OK == 0)
		{
			if(COM1.RX_Cnt >= COM_RX1_Lenth)	COM1.RX_Cnt = 0;
			RX1_Buffer[COM1.RX_Cnt++] = SBUF;
			COM1.RX_TimeOut = TimeOutSet1;
		}
	}

	if(TI)
	{
		TI = 0;
		if(COM1.TX_read != COM1.TX_write)
		{
		 	SBUF = TX1_Buffer[COM1.TX_read];
			if(++COM1.TX_read >= COM_TX1_Lenth)		COM1.TX_read = 0;
		}
		else	COM1.B_TX_busy = 0;
	}
}




